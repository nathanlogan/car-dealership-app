{"version":3,"sources":["components/InventoryList/InventoryList.module.css","components/Filters/Filters.module.css","containers/Inventory/Inventory.module.css","components/InventoryList/InventoryList.js","components/Filters/Filters.js","containers/Inventory/Inventory.js","serviceWorker.js","index.js"],"names":["module","exports","InventoryList","this","props","itemConfig","items","sortColumn","sortDirection","onSort","onPageNav","pages","currentPage","menuItems","i","push","Menu","Item","key","active","onClick","_e","data","children","pageRow","Table","Row","HeaderCell","colSpan","length","floated","pagination","icon","disabled","Icon","name","sortable","celled","fixed","Header","map","heading","sorted","className","styles","nonSortable","capitalize","Body","row","_id","spec","val","format","Cell","Footer","Component","Filters","filters","appliedFilters","onFilter","Range","Slider","createSliderWithTooltip","Object","keys","filterType","filterName","filter","forEach","item","substr","toUpperCase","Dropdown","placeholder","multiple","search","selection","onChange","e","meta","value","options","text","range","defaultValue","facet","values","min","max","vals","Inventory","state","filteredCars","cars","allFilters","getAllFilters","bind","config","car","includes","sort","carsPerPage","slice","results","sortBy","parseFloat","replace","toLowerCase","reverse","newColumn","cloneDeep","newSortDirection","doSort","setState","page","parseInt","window","scrollTo","type","newAppliedFilters","Math","ceil","carsToShow","getPagedResults","Container","app","as","data-testid","Boolean","location","hostname","match","styleLink","document","createElement","rel","href","head","appendChild","ReactDOM","render","toLocaleString","obj","low","high","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b56484a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"capitalize\":\"InventoryList_capitalize__VhQFw\",\"nonSortable\":\"InventoryList_nonSortable__2-MJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"capitalize\":\"Filters_capitalize__2eiXe\",\"range\":\"Filters_range__2RJK6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Inventory_app__3bATq\"};","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './InventoryList.module.css'\n\nimport { Table, Menu, Icon } from 'semantic-ui-react'\n\nclass InventoryList extends Component {\n  render() {\n    const {\n      itemConfig,\n      items,\n      sortColumn,\n      sortDirection,\n      onSort,\n      onPageNav,\n      pages,\n      currentPage,\n    } = this.props\n    let menuItems = []\n\n    // populate menu items\n    for (let i = 1; i <= pages; i++) {\n      menuItems.push(\n        <Menu.Item\n          key={i}\n          active={currentPage === i}\n          onClick={(_e, data) => currentPage !== i && onPageNav(data.children)}\n        >\n          {i}\n        </Menu.Item>\n      )\n    }\n\n    const pageRow = (\n      <Table.Row>\n        <Table.HeaderCell colSpan={itemConfig.length}>\n          <Menu floated=\"right\" pagination>\n            <Menu.Item\n              key=\"L\"\n              icon\n              disabled={currentPage === 1}\n              onClick={() => onPageNav(currentPage - 1)}\n            >\n              <Icon name=\"chevron left\" />\n            </Menu.Item>\n\n            {menuItems}\n\n            <Menu.Item\n              key=\"R\"\n              icon\n              disabled={currentPage === pages}\n              onClick={() => onPageNav(currentPage + 1)}\n            >\n              <Icon name=\"chevron right\" />\n            </Menu.Item>\n          </Menu>\n        </Table.HeaderCell>\n      </Table.Row>\n    )\n\n    return (\n      <Table sortable celled fixed>\n        <Table.Header>\n          {pages && pages > 1 ? pageRow : null}\n          <Table.Row>\n            {itemConfig.map(heading => (\n              <Table.HeaderCell\n                key={heading.key}\n                sorted={heading.sortable && sortColumn === heading.key ? sortDirection : null}\n                onClick={() => heading.sortable && onSort(heading.key)}\n                className={(!heading.sortable && styles.nonSortable) || ''}\n              >\n                {heading.name ? (\n                  heading.name\n                ) : (\n                  <span className={styles.capitalize}>{heading.key}</span>\n                )}\n              </Table.HeaderCell>\n            ))}\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {items.map(row => {\n            return (\n              <Table.Row key={row._id}>\n                {itemConfig.map(spec => {\n                  let val = row[spec.key]\n                  val = spec.format ? spec.format(val) : val\n                  return <Table.Cell key={`${row._id}_${spec.key}`}>{val}</Table.Cell>\n                })}\n              </Table.Row>\n            )\n          })}\n        </Table.Body>\n\n        {pages && pages > 1 ? <Table.Footer>{pageRow}</Table.Footer> : null}\n      </Table>\n    )\n  }\n}\n\nInventoryList.propTypes = {\n  itemConfig: PropTypes.array.isRequired,\n  items: PropTypes.array.isRequired,\n  sortColumn: PropTypes.string,\n  sortDirection: PropTypes.oneOf(['ascending', 'descending']),\n  onSort: PropTypes.func,\n  onPageNav: PropTypes.func,\n  pages: PropTypes.number,\n  currentPage: PropTypes.number,\n}\n\nexport default InventoryList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './Filters.module.css'\n\nimport { Dropdown } from 'semantic-ui-react'\nimport Slider from 'rc-slider'\nimport 'rc-slider/assets/index.css'\n\nconst Filters = props => {\n  const { itemConfig, filters, appliedFilters, onFilter } = props\n  const Range = Slider.createSliderWithTooltip(Slider.Range)\n\n  return (\n    <div className={styles.filters}>\n      {Object.keys(filters).map(key => {\n        const filter = filters[key]\n        let filterType\n        let filterName\n\n        // determine filter type (range or dropdown)\n        itemConfig.forEach(item => {\n          if (item.key === key) {\n            filterType = item.filterType\n            filterName = item.name || item.key.substr(0, 1).toUpperCase() + item.key.substr(1)\n          }\n        })\n\n        return filterType === 'select' ? (\n          <Dropdown\n            key={key}\n            placeholder={filterName}\n            multiple\n            search\n            selection\n            onChange={(e, meta) => onFilter(key, meta.value)}\n            options={filter.map(filter => ({\n              text: filter,\n              value: filter,\n            }))}\n          />\n        ) : (\n          <label className={styles.range} key={key}>\n            {filterName} ({filter[0]} - {filter[filter.length - 1]}):\n            <Range\n              defaultValue={[filter[0], filter[filter.length - 1]]}\n              value={appliedFilters.filter(filter => filter.facet === key)[0]?.values}\n              min={filter[0]}\n              max={filter[filter.length - 1]}\n              onChange={vals => onFilter(key, vals, 'range')}\n            />\n          </label>\n        )\n      })}\n    </div>\n  )\n}\n\nFilters.propTypes = {\n  itemConfig: PropTypes.array,\n  filters: PropTypes.object,\n  appliedFilters: PropTypes.array,\n  onFilter: PropTypes.func,\n}\n\nexport default Filters\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './Inventory.module.css'\n\nimport { sortBy, cloneDeep } from 'lodash'\n\nimport { Container, Header } from 'semantic-ui-react'\nimport InventoryList from 'components/InventoryList/InventoryList'\nimport Filters from 'components/Filters/Filters'\n\nclass Inventory extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      filteredCars: props.cars,\n\n      allFilters: this.getAllFilters(),\n      appliedFilters: [],\n      \n      sortDirection: 'ascending',\n      sortColumn: null,\n\n      currentPage: 1,\n    }\n\n    this.onSort = this.onSort.bind(this)\n    this.onPageNav = this.onPageNav.bind(this)\n    this.onFilter = this.onFilter.bind(this)\n  }\n\n  getAllFilters() {\n    let keys = []\n    let filters = {}\n\n    // set up filter categories\n    this.props.itemConfig.forEach(config => {\n      if (config['filterType']) {\n        filters[config.key] = []\n        keys.push(config.key)\n      }\n    })\n\n    // populate filter values\n    this.props.cars.forEach(car => {\n      keys.forEach(key => !filters[key].includes(car[key]) && filters[key].push(car[key]))\n    })\n\n    // sort filter values\n    Object.keys(filters).forEach(key => (filters[key] = filters[key].sort()))\n\n    return filters\n  }\n\n  getPagedResults() {\n    const { carsPerPage } = this.props\n    const { filteredCars, currentPage } = this.state\n\n    return filteredCars.slice(\n      carsPerPage * (currentPage - 1),\n      carsPerPage * currentPage\n    )\n  }\n\n  doSort(results, sortColumn, sortDirection) {\n    const sortCars = car => {\n      let val = car[sortColumn]\n\n      if (typeof val === 'string') {\n        // coerce prices into sortable numbers\n        if (val.substr(0, 1) === '$') {\n          return parseFloat(val.replace(/[^\\d]/g, ''))\n        }\n        // so you sort alphabetically, not by weird case-sensitivity sorting\n        else return val.toLowerCase()\n      } else return val\n    }\n\n    results = sortBy(results, sortCars)\n    if (sortDirection === 'descending') results.reverse()\n\n    return results\n  }\n\n  onSort(newColumn) {\n    const { sortColumn, sortDirection } = this.state\n    let results = cloneDeep(this.state.filteredCars)\n\n    if (sortColumn === newColumn) {\n      const newSortDirection = sortDirection === 'ascending' ? 'descending' : 'ascending'\n      results = this.doSort(results, newColumn, newSortDirection)\n\n      this.setState({\n        filteredCars: results,\n        sortDirection: newSortDirection,\n        currentPage: 1,\n      })\n    } else {\n      results = this.doSort(results, newColumn)\n\n      this.setState({\n        filteredCars: results,\n        sortDirection: 'ascending',\n        sortColumn: newColumn,\n        currentPage: 1,\n      })\n    }\n  }\n\n  onPageNav(page = 1) {\n    this.setState(\n      { currentPage: parseInt(page, 10) || 1 },\n      () => window.scrollTo(0, 0)\n    )\n  }\n\n  // apply \"OR\" logic within filter type, but \"AND\" logic across filter types\n  onFilter(facet, values, type = 'select') {\n    let results = cloneDeep(this.props.cars)\n    let newAppliedFilters = []\n\n    // nuke the old filter definition (if it existed)\n    newAppliedFilters = this.state.appliedFilters.filter(filter => filter.facet !== facet)\n    // only save our filter if it has values\n    if (values.length) newAppliedFilters.push({ facet, values, type })\n\n    // apply each filter type\n    newAppliedFilters.forEach(filter => {\n      if (filter.type === 'select') {\n        results = results.filter(car => filter.values.includes(car[filter.facet]))\n      } else {\n        results = results.filter(\n          car => car[filter.facet] >= filter.values[0] && car[filter.facet] <= filter.values[1]\n        )\n      }\n    })\n\n    // apply current sort before returning\n    if (this.state.sortColumn) {\n      results = this.doSort(results, this.state.sortColumn, this.state.sortDirection)\n    }\n\n    this.setState({\n      filteredCars: results,\n      appliedFilters: newAppliedFilters,\n      currentPage: 1,\n    })\n  }\n\n  render() {\n    const { filteredCars, allFilters, appliedFilters, sortColumn, sortDirection, currentPage } = this.state\n    const pages = Math.ceil(filteredCars.length / this.props.carsPerPage)\n    const carsToShow = this.getPagedResults()\n\n    return (\n      <Container className={styles.app}>\n        <Header as=\"h1\">Acme Car Dealership</Header>\n\n        <Header as=\"h2\">Filters:</Header>\n        <Filters\n          itemConfig={this.props.itemConfig}\n          onFilter={this.onFilter}\n          filters={allFilters}\n          appliedFilters={appliedFilters}\n        />\n\n        <Header as=\"h3\" data-testid=\"results\">{filteredCars.length} results</Header>\n        <InventoryList\n          itemConfig={this.props.itemConfig}\n          items={carsToShow}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          onSort={this.onSort}\n          onPageNav={this.onPageNav}\n          pages={pages}\n          currentPage={currentPage}\n        />\n      </Container>\n    )\n  }\n}\n\nInventory.propTypes = {\n  cars: PropTypes.array,\n  itemConfig: PropTypes.array,\n  carsPerPage: PropTypes.number\n}\n\nexport default Inventory\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Inventory from './containers/Inventory/Inventory'\nimport * as serviceWorker from './serviceWorker'\n\nimport cars from 'store.json'\n\nconst styleLink = document.createElement('link')\nstyleLink.rel = 'stylesheet'\nstyleLink.href = '//cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css'\ndocument.head.appendChild(styleLink)\n\nconst itemConfig = [\n  { key: 'year', name: 'Years', sortable: true, filterType: 'range' },\n  { key: 'make', sortable: true, filterType: 'select' },\n  { key: 'model', sortable: true, filterType: 'select' },\n  {\n    key: 'miles',\n    sortable: true,\n    format: val => val.toLocaleString('en-us'),\n  },\n  { key: 'price', sortable: true },\n  { key: 'color', filterType: 'select' },\n  {\n    key: 'cityMileage',\n    name: 'City MPG',\n    format: obj => `${obj.low}-${obj.high}`,\n  },\n  {\n    key: 'highwayMileage',\n    name: 'Highway MPG',\n    format: obj => `${obj.low}-${obj.high}`,\n  },\n  { key: 'description' },\n]\n\nReactDOM.render(\n  <Inventory cars={cars} itemConfig={itemConfig} carsPerPage={50} />,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}